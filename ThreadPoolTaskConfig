package *.Utils;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * @Author sugm
 * @ClassName ThreadPoolConfig
 * @Date 2025/6/11
 * @Description TODO
 */
@Configuration
public class ThreadPoolConfig {
    private int CORE_POOL_SIZE = 1;
    // 最大线程数
    private int MAX_POOL_SIZE = 10;
    // 空闲线程最大存活时间
    private int KEEP_ALIVE_TIME = 60;
    // 时间单位
    private TimeUnit KEEP_ALIVE_TIME_UNIT = TimeUnit.SECONDS;
    // 阻塞队列容量
    private int QUEUE_CAPACITY = 100;

    /*
     * @Title: threadPoolTaskExecutor
     * @Author: sugm
     * @Date: 2025/6/11
     * @Params: []
     * @Return: ThreadPoolTaskExecutor
     * @Description: spring单例bean模式
     */
    @Bean(name = "threadPoolExecutor")
    public ThreadPoolTaskExecutor threadPoolTaskExecutor(){
        ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();
        threadPoolTaskExecutor.setMaxPoolSize(MAX_POOL_SIZE);
        threadPoolTaskExecutor.setCorePoolSize(CORE_POOL_SIZE);
        threadPoolTaskExecutor.setKeepAliveSeconds(KEEP_ALIVE_TIME);
        //拒绝策略
        threadPoolTaskExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
        return threadPoolTaskExecutor;
    }
}
